openapi: 3.0.0
info:
  description: "# Introduction\n\nScaleway Functions is a `Function As A Service`\
    \ product which gives users the ability to deploy atomic serverless workloads\
    \ and only pay for resources used while functions are running.\n\nIt provides\
    \ many advantages, such as:\n\n- Functions are only executed when a event is triggered,\
    \ which allows users to save money while code is not running\n- Auto-Scalability:\n\
    \  - Automated `Scaling up and down` based on user configuration (e.g. min: 0,\
    \ max: 100 replicas of my function).\n  - Automated `Scaling to zero` when function\
    \ is not executed, which saves some money for the user and save Computing resources\
    \ for the cloud provider.\n- Scale only the endpoint\n\n## Main features\n\n-\
    \ Fully isolated environments\n- Scaling to zero (save money and computing resources\
    \ while code is not executed)\n- High Availability and Scalability (Automated\
    \ and configurable, each function may scale automatically according to incoming\
    \ workloads)\n- Runtimes for the following programming languages:\n  - Golang\n\
    \  - node.js v8 and v10\n  - Python v2.7 and v3.7\n  - Container As A Service:\
    \ deploy any non-root container listening on port \\$PORT\n- Multiple event sources:\n\
    \  - HTTP (request on our Gateway will execute the function)\n  - CRON (time-based\
    \ job, runs according to configurable cron schedule)\n- Integrated with the Scaleway\
    \ Container Registry product\n  - Each of your functions namespace has an associated\
    \ registry namespace\n  - All your functions are available as docker image in\
    \ this registry namespace\n  - Each version of your function matches a tag of\
    \ this image\n\n# Scaleway Functions Components\n\n## Namespaces\n\nA `Namespace`\
    \ is basically a project, a group of `functions`, in which you may set-up `environment\
    \ variables` to use in each function.\n\n**Please Note** that Scaleway Functions\
    \ operates upon `Kubernetes`, so we use `Docker` container technology to execute\
    \ user's code.\n\nTherefore, we integrate our APIs with `Scaleway's Container\
    \ Registry` product to store user's docker images. **Each Namespace gets a Container\
    \ Namespace** in which functions images will be pushed.\n\n## Functions\n\nA `Function`\
    \ in Scaleway Functions consists of multiple components:\n\n- A `Runtime` (Golang,\
    \ Python 2/3, Node 8/10...), basically the programming language/environment in\
    \ which your code will be executed.\n- `Environment Variables`: You may configure\
    \ specific environment variables (Database host/credentials for example) which\
    \ are safely encrypted in our Database, and will be mounted inside your Functions.\
    \ **Note** that environment variables set at `Namespace` level will also be mounted\
    \ (in every function). Environment variables written at `function` level override\
    \ the ones set at `namespace` level (if two env var have the same name for example).\n\
    - `Source code`: In order to run in the cloud, a function must contain user's\
    \ source code based on the programming language chosen in `runtime` variable.\n\
    - `Resources`: users may decide how much computing resources to allocate to each\
    \ function -> `Memory Limit` (in MB). We will then allocate the right amount of\
    \ `CPU` based on Memory Limit choice. The right choice for your functions's resources\
    \ is very important, as you will be billed based on compute usage over time and\
    \ the number of functions executions.\n\nRepresentation of given CPU resources\
    \ based on configured Memory Limit (in MB) for a function:\n\n| Memory (in MB)\
    \ | CPU  |\n| :------------: | :--: |\n|      128       | 70m  |\n|      256 \
    \      | 140m |\n|      512       | 280m |\n|      1024      | 560m |\n\nWhere\
    \ 560mCPU accounts roughly for half of one CPU power of a Scaleway General Purpose\
    \ instance\n\nSupported runtimes:\n\n- node8\n- node10\n- python2\n- python3\n\
    - golang 1.11+\n\n## Containers\n\nContainers are applications you deploy with\
    \ your own runtime:\n\n- Create a docker image\n- Create a container\n- Push your\
    \ image in your registry namespace\n- Deploy\n\nThey are used, scaled and billed\
    \ like functions\n\n## CRON\n\nA `CRON` is a type of event which triggers a Scaleway\
    \ Function (or Container), it is an `add-on` to your function.\n\nCRONs inside\
    \ Scaleway Serverless have the following properties:\n\n- `schedule`: UNIX Formatted\
    \ CRON schedule. Your function will be executed based on this schedule. For example,\
    \ `5 4 * * 0` means execute my function at \"04:05 AM\" on each Sunday (see this\
    \ [page from Ubuntu's official documentation](https://doc.ubuntu-fr.org/cron)).\n\
    - `args`: JSON Object passed to your function. You can use this property to define\
    \ data that will be passed to your function's `event.body` object. For Containers,\
    \ you might handle these arguments as the HTTP Request's Body.\n\nUnder the hood,\
    \ CRON Triggers are [Kubernetes JOBs](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/)\
    \ sending HTTP POST requests to your function/container.\n\nTo deploy a CRON Function,\
    \ you must first:\n\n- Create a Namespace\n- Deploy a function (or a container)\n\
    - Create a CRON and associate it with the created/deployed function.\n\n## Authentication\n\
    \nBy default, creating a function or a container will make it `public`, meaning\
    \ that anybody knowing the endpoint could execute it.\n\nA function or a container\
    \ can be made `private` with the `privacy` parameter.\n\nHere is the workflow\
    \ used to authenticate to a `private` Scaleway Function:\n\n- Create a function\
    \ with privacy `private`\n- Deploy your function\n- Generate a specific `token`\
    \ from our API\n- Send a request to your function and provide the generated token\
    \ (all unauthenticated requests will be rejected).\n\n### Tokens\n\nPrivacy works\
    \ with JWT tokens. A JWT Token can be retrieved from the endpoint GET `/jwt/issue`.\
    \ Depending on the parameters, a jwt token can be valid for either a function,\
    \ a container, or a namespace:\n\n- `/jwt/issue?namespace_id=1`: issues JWT valid\
    \ for all functions inside namespace with ID `1`.\n- `/jwt/issue?function_id=1`:\
    \ issues JWT valid only for function with id `1`.\n- `/jwt/issue?container_id=1`:\
    \ issues JWT valid only for container with id `1`.\n\n**Note that you may (optional)\
    \ provide an expiration date (formatted \"yyyy-mm-ddT00:00:00Z\") for the token**:\
    \ example `/jwt/issue?expiration_date=2020-01-02T00:00:00Z&namespace_id=1` will\
    \ generate a token, valid for all functions and containers inside Namespace with\
    \ id `1`, and this token will be valid until January 2nd 2020.\n\nThe token will\
    \ have the following claims:\n\n```json\n{\n  \"application_claim\": [\n    {\n\
    \      \"namespace_id\": \"string\",\n      \"application_id\": \"string\" //\
    \ optional: id of function/container\n    }\n  ]\n}\n```\n\nTokens are not stored\
    \ by Scaleway and can not be retrieved if lost (but new tokens can be generated).\n\
    \nToken revocation is not yet supported, the best way to reset the tokens is to\
    \ destroy and recreate the namespaces and all of its functions.\n\n### Functions\n\
    \nA `private` function observes this behaviour:\n\n- If a call is done without\
    \ `SCW_FUNCTIONS_TOKEN` header, the call is rejected (`Status Code 404`)\n- If\
    \ `SCW_FUNCTIONS_TOKEN` header is provided, the token is validated using a public\
    \ key attached to the namespace.\n\nThe environment variables `SCW_PUBLIC`, `SCW_PUBLIC_KEY`,\
    \ `SCW_NAMESPACE_ID`, `SCW_APPLICATION_ID` are provided by our APIs to validate\
    \ incoming tokens.\n\nFor example, to execute a private function by providing\
    \ a JWT using `curl`, you may run the following command:\n\n```bash\ncurl -H \"\
    SCW_FUNCTIONS_TOKEN: <generated-token>\" <your-function-host>\n```\n\n### Containers\n\
    \nAs the token validation is done in the function runtime, marking a container\
    \ as `private` will not do the actual authentication.\n\nInstead, it will set\
    \ the following environment variables, which you can use in your application to\
    \ validate incoming requests (token provided by our APIs):\n\n- `SCW_PUBLIC`:\
    \ `true` or `false` based on your privacy settings\n- `SCW_PUBLIC_KEY`: PEM-encoded\
    \ public Key used to decrypt tokens\n- `SCW_NAMESPACE_ID`: Current Namespace ID\n\
    - `SCW_APPLICATION_ID`: Current Container ID\n\nAs described above, tokens generated\
    \ from our API will contain either `namespace id` or `application id` in its claims,\
    \ so you may verify it's validity (after decrypting the JWT with the inject `SCW_PUBLIC_KEY`).\n\
    \n## Logs\n\nFunctions and containers output logs can be retrieved from the endpoint\
    \ GET `/logs`. You need to pass its ID as an `application_id` parameter.\n\n#\
    \ Quick Start Guide\n\n## Pre-requisites\n\nWhether you decide to use Serverless\
    \ Framework or directly our API, you'll need your Scaleway Organization ID and\
    \ a Scaleway\nOrganization Access Key.\n\n- Install `curl`\n- Install `jq` will\
    \ make it easier to manage JSON output from our APIs\n\nTo call Scaleway API,\
    \ you need an `X-Auth-Token`. If you don't have one yet, you can create it on\
    \ the [credentials page](https://cloud.scaleway.com/#/credentials) of your Scaleway\
    \ account (must be done via web interface).\n\nIn order to retrieve your `Organization\
    \ ID` and your `secret Key`, you must go to your [console's credentials page](https://console.scaleway.com/account/credentials):\n\
    \n- Login/Register to [Scaleway console](https://console.scaleway.com)\n- Go to\
    \ your [credentials management page](https://console.scaleway.com/account/credentials)\n\
    - Retrieve your `organization ID` and generate a token (see following picture):\n\
    \  ![credentials section](https://functions-doc.s3.fr-par.scw.cloud/credentials_section.png)\n\
    - Retrieve your token's `secret key`:\n  ![token secret key](https://functions-doc.s3.fr-par.scw.cloud/secret_key.png)\n\
    \nThen, export then as variables to use them with curl\n\n```bash\nexport TOKEN=\"\
    <Secret key of your token>\"\n# Only available in fr-par at the moment\nexport\
    \ REGION=\"<choose your location (nl-ams/fr-par)>\"\nexport ORGANIZATION_ID=\"\
    <your organization ID>\"\n```\n\n## Serverless Framework\n\nThe following sections\
    \ explain how to use our API, with a tutorial and the auto-generated API documentation.\
    \ However, we developed a [Serverless Framework plugin](https://github.com/scaleway/serverless-scaleway-functions)\
    \ enabling users to deploy their serverless workloads much more easily with a\
    \ single `serverless deploy` command. No magic there, it's just a nice tool calling\
    \ our API.\n\nIf what you are looking for is an easy way to deploy your code,\
    \ you may prefer Serverless Framework.\n\nBelow, you will find a step-by-step\
    \ guide on how to create a `namespace`, configure and deploy `functions`, and\
    \ trigger your `functions` via HTTP and CRON.\n\n## Create a Namespace\n\nCustomize\
    \ the name and set your organization ID\n\n```bash\n\ncurl -X POST \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/namespaces\"\
    \ -H \"accept: application/json\" -H \"X-Auth-Token: $TOKEN\" -H \"Content-Type:\
    \ application/json\" \\\n-d \"{\\\"name\\\": \\\"your-namespace-name\\\", \\\"\
    organization_id\\\": \\\"$ORGANIZATION_ID\\\", \\\"environment_variables\\\":\
    \ {\\\"YOUR_VARIABLE\\\": \\\"content\\\"}}\"\n```\n\nCopy the `id` field of the\
    \ response to use at the next steps. For the sake of simplicity we will save the\
    \ ID to a variable, which we will use in the following examples:\n\n```bash\n\
    export NAMESPACE_ID=\"<your namespace id>\"\n```\n\nTo destroy a namespace (along\
    \ with all functions and crons) use the following call:\n\n```bash\ncurl -s -H\
    \ \"X-Auth-Token: $TOKEN\" -X DELETE \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/namespaces/$NAMESPACE_ID\"\
    \n```\n\n## Write a function handler\n\n**Please note that our runtimes are AWS\
    \ Lambda Compatible**, which means that we respect Lambda's format (event, context\
    \ and callback parameters hold the same keys as AWS Lambda's).\nBe careful about\
    \ `context` though, as we do not provide the exact same keys as Lambda (we don't\
    \ have cognito services for example).\n\nFor this example, we'll be using `node10`\
    \ runtime:\n\n```bash\ntouch handler.js\n```\n\nAnd inside `handler.js` file:\n\
    \n```javascript\n// handler.js\nmodule.exports.myHandler = async (event, context,\
    \ callback) => {\n  const response = {\n    body: JSON.stringify({message: \"\
    Hello, World\"}),\n    statusCode: 200,\n    headers: {\n      MY_HEADER: \"its\
    \ content\",\n    },\n  }\n  return response\n}\n```\n\n## Create a function\n\
    \nWhen creating a function, you may customize multiple fields:\n\n- `name`: The\
    \ name of your function\n- `namespace_id`: ID of the namespace in which you want\
    \ to create your function\n- `runtime`: Your function's runtime, check the supported\
    \ runtimes above\n- `memory_limit`: Memory (in MB) allocated to your function,\
    \ see the table of memory/CPU allocation above (increasing the memory limit will\
    \ increase the cost of your function executions as we allocate more resources\
    \ to your functions).\n- `min_scale`: Minimum replicas for your function, defaults\
    \ to `0`, **Note** that a function is `billed` when it gets executed, and using\
    \ a `min_scale` greater than 0 will cause your function to run all the time.\n\
    - `max_scale`: Maximum replicas for your function (defaults to `20`), our system\
    \ will scale your functions automatically based on incoming workload, but will\
    \ never scale the number of replicas above the configured `max_scale`.\n- `handler`\
    \ (More details with examples in each language/runtime section below):\n  - `Python`:\
    \ Path to function handler's file and the function to use as the handler: `src/handler.my_handler`\
    \ => file `handler.py` defining a `my_handler` function, inside `src` folder.\n\
    \  - `Node`: Path to function handler's file, suffixed the name of the function\
    \ to use as the handler: `src/handler.myHandler` => file `handler.js` exporting\
    \ a `myHandler` function, inside `src` directory.\n  - `Golang`: Path to the package\
    \ containing the handler: `my_handler`: the code containing the handler is located\
    \ inside a `my_handler` directory (must be `package main`, and exposing a `main\
    \ function`).\n\n```bash\ncurl -X POST \\\n-H \"X-Auth-Token: $TOKEN\"\\\n\"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/functions\"\
    \\\n-d \"{\\\"name\\\": \\\"function-name\\\", \\\"namespace_id\\\": \\\"$NAMESPACE_ID\\\
    \", \\\"memory_limit\\\": 128, \\\"min_scale\\\": 0, \\\"max_scale\\\": 20, \\\
    \"runtime\\\": \\\"node10\\\", \\\"handler\\\": \\\"handler.myHandler\\\"}\"\n\
    export FUNCTION_ID = \"<your-function-id>\"\n```\n\n## Upload your source code\
    \ (Scaleway runtime)\n\nThese steps only apply if you use a Scaleway runtime.\
    \ In this section, you will upload your code to a S3 bucket, which\nwe'll package\
    \ and build into a container image.\n\nThis container image will then be available\
    \ in a registry namespace associated to your functions namespace.\n\n### Archive\
    \ your code\n\n```bash\nexport FUNCTION_ARCHIVE=\"function-$FUNCTION_ID.zip\"\n\
    ```\n\nYou may then create a zip archive with your code:\n\n```bash\nzip $FUNCTION_ARCHIVE\
    \ handler.js\n```\n\n**Please Note that if you wish to use external dependencies,\
    \ you will have to package them inside the zip archive as well**:\n\n```bash\n\
    zip -r $FUNCTION_ARCHIVE package.json handler.js node_modules\n```\n\n### Get\
    \ a presigned URL for our S3 Bucket to store your function handler\n\nYou need\
    \ to get the size of your archive in bytes, in order to ask for a presigned URL\
    \ to upload your source code:\n\n```bash\nls -lh\n-rw-r--r--  1 user  group  \
    \ 675 Apr 18 15:42 $FUNCTION_ARCHIVE\n\nexport ARCHIVE_SIZE=675\n```\n\n```bash\n\
    curl -X GET -H \"X-Auth-Token: ${TOKEN}\" \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/functions/$FUNCTION_ID/upload-url?content_length=$ARCHIVE_SIZE\"\
    \n\n# Example of response from our API\n{\"url\":\"https://s3.fr-par.scw.cloud/scw-database-srvless-prod/uploads/function-b0525a73-947d-4ba4-92de-17f267a7ec5a.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256\\\
    u0026X-Amz-Credential=SCW6Z6VKJVG81FQZVB14%2F20190627%2Ffr-par%2Fs3%2Faws4_request\\\
    u0026X-Amz-Date=20190627T092839Z\\u0026X-Amz-Expires=3600\\u0026X-Amz-SignedHeaders=content-length%3Bcontent-type%3Bhost\\\
    u0026X-Amz-Signature=e9f3e22f39638dac047f0f4e9ab521c7971cacb01f61f523cb948baa328a0eff\"\
    ,\"headers\":{\"content-length\":[\"347\"],\"content-type\":[\"application/octet-stream\"\
    ]}}\n```\n\nAs you can see, the url is not properly formatted (\\u0026...), in\
    \ order to use it properly to upload your code, you must\ncopy the full URL with\
    \ quotes (otherwise your terminal might add unwanted \\ in the url string):\n\n\
    ```bash\nexport FUNCTION_ARCHIVE_URL=$(echo -n \"<your-url>\")\n```\n\n**Note**:\
    \ that you will get an error in the following step if you do not Copy the url\
    \ with wrapping quotes and save inside a variable using echo -n to replace \\\
    u0026 expressions\n\nIf you use postman, you can usually export the presigned\
    \ url as it is, as long as you copy/paste the quotes too.\n\n### Upload your code\
    \ to the presigned URL\n\n```bash\ncurl -H \"Content-Type: application/octet-stream\"\
    \ --upload-file $FUNCTION_ARCHIVE -H \"Content-Length: $ARCHIVE_SIZE\" $FUNCTION_ARCHIVE_URL\n\
    ```\n\n## Deploy a function\n\nThen, run the following command to deploy your\
    \ function:\n\n```bash\ncurl -X POST -H \"X-Auth-Token: $TOKEN\" \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/functions/$FUNCTION_ID/deploy\"\
    \ -d \"{}\"\n```\n\nThe process may take a little bit of time, as we have to build\
    \ your source code into an executable function (wrapped by our runtimes), and\
    \ deploy it to our cloud platform.\n\n## Trigger your function\n\nOnce your function\
    \ has been properly deployed, you may retrieve your function's HTTP(s) endpoint\
    \ with the following command:\n\n```bash\ncurl -X GET -H \"X-Auth-Token: $TOKEN\"\
    \ \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/functions/$FUNCTION_ID\"\
    \n\nexport FUNCTION_ENDPOINT=\"<endpoint>\"\n```\n\nAnd then, call your function\
    \ via its endpoint:\n\n```bash\ncurl -X GET \"$FUNCTION_ENDPOINT\"\n```\n\n##\
    \ Get your functions logs\n\nTo retrieve the functions output logs:\n\n```bash\n\
    curl -X GET -H \"X-Auth-Token: $TOKEN\" \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/logs?application_id=$FUNCTION_ID\"\
    \n```\n\n## Create a CRON Trigger for your Function\n\nAs described above, `CRON`\
    \ triggers are a way to execute your applications (Functions and Containers) periodically,\
    \ based on a given Schedule.\n\nIt means that we can execute our function every\
    \ day at 1PM for example, with a given set of data.\n\nIn order to add a `CRON`\
    \ Trigger to your function, you need to retrieve your function ID (Done previously\
    \ if you followed the guide), and create a new CRON associated to your function:\n\
    \n```bash\ncurl -X POST -H \"X-Auth-Token: $TOKEN\" \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/crons\"\
    \ -d \"{\\\"application_id\\\": \\\"$FUNCTION_ID\\\", \\\"schedule\\\": \\\"0\
    \ 13 * * *\\\", \\\"args\\\": {\\\"key\\\": \\\"value\\\"}}\"\n```\n\nThe above\
    \ request will create and deploy a Kubernetes CRON Job in charge of executing\
    \ your function every day at 13:00, with the data `{\"key\": \"value\"}`, retrieved\
    \ from the `event.body` object in your handler.\n\n**Note that this step is also\
    \ applicable to containers, you just need to pass your container ID as the CRON's\
    \ `application_id` property**.\n\n## Create a container\n\nCreating a container\
    \ is nearly identical to creating a function.\n\nThe main difference is that here\
    \ you don't need to upload your code in a S3 bucket. Instead, you need to build\
    \ it as a docker image and push it to\nour registry.\n\n```bash\ncurl -X POST\
    \ \\\n-H \"X-Auth-Token: $TOKEN\" \\\n\"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/containers\"\
    \ \\\n-d \"{\\\"name\\\": \\\"container-name\\\", \\\"namespace_id\\\": \\\"$NAMESPACE_ID\\\
    \", \\\"memory_limit\\\": 128, \\\"min_scale\\\": 0, \\\"max_scale\\\": 20}\"\n\
    ```\n\nLet's export the container_name for later:\n\n```bash\nexport CONTAINER_NAME=\"\
    <container_name>\"\nexport CONTAINER_ID=\"<container_id>\"\n```\n\n### Get your\
    \ registry namespace\n\nFirst, get your registry_namespace_id\n\n```bash\ncurl\
    \ -X GET -H \"X-Auth-Token: ${TOKEN}\" \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/namespaces/$NAMESPACE_ID\"\
    \nexport REGISTRY_NAMESPACE_ID=\"<registry-namespace-id>\"\n```\n\nSecondly, get\
    \ your registry name\n\n```bash\ncurl -X GET -H \"X-Auth-Token: ${TOKEN}\" \"\
    https://api.scaleway.com/registry/v1beta2/regions/$REGION/namespaces/$REGISTRY_NAMESPACE_ID\"\
    \nexport REGISTRY_ENDPOINT=\"<endpoint>\"\n```\n\n### Push your image\n\nWe suppose\
    \ you already have a working image here. It can be anything which listens on a\
    \ env variable \\$PORT variable.\nNote that we run your container as user 1000,\
    \ not root, so it must be runnable under these conditions\n\nTo push your image,\
    \ we invite you to check the container registry documentation.\n\n```bash\ndocker\
    \ login $REGISTRY_ENDPOINT -u userdoesnotmatter -p $TOKEN\ndocker tag myimage\
    \ $REGISTRY_ENDPOINT/${CONTAINER_NAME}:latest\ndocker push $REGISTRY_ENDPOINT/${CONTAINER_NAME}:latest\n\
    ```\n\n### Deploy a container\n\n```bash\ncurl -X POST -H \"X-Auth-Token: $TOKEN\"\
    \ \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/containers/$CONTAINER_ID/deploy\"\
    \ -d \"{}\"\n```\n\n## Trigger your container\n\n```bash\ncurl -X GET -H \"X-Auth-Token:\
    \ $TOKEN\" \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/containers/$CONTAINER_ID\"\
    \nexport CONTAINER_ENDPOINT=\"<endpoint>\"\n\ncurl -X GET \"$CONTAINER_ENDPOINT\"\
    \n```\n\n## Get your containers logs\n\nTo retrieve the containers output logs:\n\
    \n```bash\ncurl -X GET -H \"X-Auth-Token: $TOKEN\" \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/logs?application_id=$CONTAINER_ID\"\
    \n```\n\n# Writing code\n\nRuntimes are environment that you may use to develop\
    \ their cloud functions.\n\nScaleway Runtimes are `Lambda Compatible` -> For API\
    \ Gateway Proxy `event types` (as we only support HTTP and CRON, but cron basically\
    \ sends HTTP requests to deployed functions).\n\nIn a common use case with `Serverless\
    \ Framework` for example, in which a user has multiple functions in the same repository\
    \ and would like to upload them all at the same time with a single command, we\
    \ need a way to know, which file (Python/JavaScript) or package (Golang) to use\
    \ to execute our functions.\n\n**Please Note** that in some runtimes, this `decision`\
    \ is made at runtime (Python and JavaScript, as they are interpreted languages,\
    \ so our runtime will only `import` the handler), while in some others (Golang),\
    \ it is done at compile/build time (when user `deploys` a function) as we need\
    \ to build user's package.\n\n## Node (v8, v10)\n\n### Node handler function\n\
    \n**Please Note** currently function handler must be a named exported component\
    \ => `module.exports.myHandler = (event, context, callback) => {}`\n\nThere are\
    \ multiple ways to return a response from a handler function:\n\nFirst one: `return\
    \ object with body and statusCode` will set the status code as HTTP Response Code,\
    \ and body as the Response's body, headers as Headers.\n\n- Stringified **body**\
    \ (like `AWS Lambda`):\n\n```javascript\nmodule.exports.myHandler = (event, context,\
    \ callback) => {\n  return {\n    statusCode: 201,\n    body: JSON.stringify({\n\
    \      message: \"async function\",\n    }),\n    headers: {\n      \"Content-Type\"\
    : \"application/json\",\n    },\n  }\n}\n```\n\n- **Not** Stringified **body**\
    \ (like `AWS Lambda`):\n\n```javascript\nmodule.exports.myHandler = (event, context,\
    \ callback) => {\n  return {\n    statusCode: 201,\n    body: {\n      message:\
    \ \"async function\",\n    },\n    headers: {\n      \"Content-Type\": \"application/json\"\
    ,\n    },\n  }\n}\n```\n\nSecond: `return Object/entity (number, boolean, string...)\
    \ withtout properties body and statusCode` will return the response `as is`:\n\
    \n```javascript\nmodule.exports.myHandler = (event, context, callback) => {\n\
    \  return {\n    message: \"message\",\n  }\n\n  // Or\n  return JSON.stringify({message:\
    \ \"message\"})\n  // OR\n  return \"Hello, world\"\n  // OR\n  return 1 // true,false,undefined,null...\n\
    }\n```\n\n`Use Callback parameter`:\n\n```javascript\nmodule.exports.myHandler\
    \ = (event, context, callback) => {\n  const response = {\n    statusCode: 201,\n\
    \    body: {\n      message: \"async function\",\n    },\n    headers: {\n   \
    \   \"Content-Type\": \"application/json\",\n    },\n  }\n\n  // Successful response\n\
    \  callback(undefined, response)\n  // Error response\n  callback(err)\n}\n```\n\
    \n**Note that you may use life changing async in handlers** :)\n\n`return a Promise`:\n\
    \n```javascript\nmodule.exports.myHandler = async (event, context, callback) =>\
    \ {\n  return {\n    statusCode: 201,\n    body: {\n      message: \"async function\"\
    ,\n    },\n    headers: {\n      \"Content-Type\": \"application/json\",\n   \
    \ },\n  }\n}\n\n// OR\nmodule.exports.myHandler = (event, context, callback) =>\
    \ {\n  const response = {\n    statusCode: 201,\n    body: {\n      message: \"\
    async function\",\n    },\n    headers: {\n      \"Content-Type\": \"application/json\"\
    ,\n    },\n  }\n\n  return new Promise((resolve, reject) => {\n    // do something\n\
    \    if (err) return reject(err)\n    return resolve(response)\n  })\n}\n```\n\
    \n### Node handler name\n\nThe Handler name is basically a path to the handler\
    \ file.\n\nFor example, let's say I have two handlers `hello.js` and `world.js`\
    \ inside `src/handlers` folder:\n\n```\nsrc\n-- handlers\n---- hello.js => module.exports.sayHello\n\
    ---- world.js => module.exports.toTheWorld\n```\n\nThen, you need to provide a\
    \ custom handler name for each of these handlers, so each of your functions will\
    \ know which handler file to run: `hello` -> `src/handlers/hello.sayHello` and\
    \ `world` -> `src/handlers/world.toTheWorld`.\n\n**By default**, the handler path\
    \ is `handler.handle` (`module.exports.handle` in handler.js).\n\n### Node additional\
    \ dependencies\n\nIf you ever need to push external dependencies for your node.js\
    \ functions, you will have to package your `node_modules` directory into your\
    \ deployment archive.\n\n```\n-- handler.js\n-- node_modules\n---- <your-dependencies>\n\
    ```\n\nYou may definitely use tools such as `webpack` or [NCC](https://github.com/zeit/ncc)\
    \ (CLI tool to build node.js executables, inspired from `go` CLI), which will\
    \ package your code into separate files, you will then be able to upload your\
    \ compiled handler file, which reduces the size of your bundle.\n\nExample:\n\n\
    ```bash\nncc handler.js -o build/handler.js # -> Builds dist/inde\n```\n\nThen,\
    \ set up your `function handler` to be: `build/handler.js` if you package the\
    \ whole `build` directory.\nDon't forget to point the `function handler` property\
    \ to the path of your built handler in your archive (if `build/handler.myHandler`\
    \ then `handler must be build/handler.js`)\n\n## Golang\n\n**Only versions 1.11+\
    \ are supported on Scaleway Serverless**\n\n### Golang handler function\n\n**Please\
    \ Note** that every handler must be in its package, identified by `package main`,\
    \ and exporting a main function with the following `lambda.Start` statement:\n\
    \n```golang\n// Must Always be package main\npackage main\n\n// Import both packages\
    \ events and lambda from scaleway-functions-go library\nimport (\n\t\"encoding/json\"\
    \n\t\"github.com/scaleway/scaleway-functions-go/events\"\n\t\"github.com/scaleway/scaleway-functions-go/lambda\"\
    \n)\n\n// Handler - Your handler function, uses APIGatewayProxy event type as\
    \ your function will always get HTTP formatted events, even for CRON\nfunc Handler(req\
    \ events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\t\
    return events.APIGatewayProxyResponse{\n\t\tBody:       \"Your response\",\n\t\
    \tStatusCode: 200,\n\t}, nil\n}\n\n// Main function is mandatory -> Must call\
    \ lambda.Start(yourHandler) otherwhise your handler will not be called properly.\n\
    func main() {\n\tlambda.Start(Handler)\n}\n```\n\n### Golang handler name\n\n\
    In Golang, as it is a `compiled` language, you need to provide Scaleway Function\
    \ API with a `handler name` pointing to the function's directory.\n\n```\nsrc\n\
    -- handlers\n---- hello\n------ go.mod\n------ go.sum\n------ main.go -> package\
    \ main in \"handlers/hello\" subdirectory\n---- world\n------ go.mod\n------ go.sum\n\
    ------ main.go -> package main in \"handlers/workd\" subdirectory\nhandler.go\
    \ -> package main at the root of serverless project\ngo.mod\ngo.sum\n```\n\nThen,\
    \ you need to provide a custom handler name for each of these handlers, so each\
    \ of your function will know which handler file to run: `hello` -> `handlers/hello`,\
    \ `world` -> `handlers/world`, and for the `handler.go` at the root of the project\
    \ -> `.`\n\n**By default**, the handler path is `.` (`package main` at the root\
    \ of the archive).\n\n### Golang additional dependencies\n\nIf you need external\
    \ dependencies for your `Golang handlers`, you may provide these dependencies\
    \ by using `Go Modules`:\n\n- Our runtimes automatically installs your dependencies\
    \ at Build time (Once you start the function `deployment`). **Note that dependencies\
    \ installation at build-time will result in longer builds**.\n\n  ```\n  -- handler.go\n\
    \  -- go.mod\n  -- go.sum\n  ```\n\n- You may package your dependencies with the\
    \ command `go mod vendor`, and provide your generated `vendor` directory to the\
    \ function archive. **This approach will save you some time during builds**:\n\
    \  ```\n  -- handler.go\n  -- go.mod\n  -- go.sum\n  -- vendor # Dependencies\
    \ should be installed inside your vendor directory\n  ---- <your-dependencies>\n\
    \  ```\n\n## Python\n\n### Python handler function\n\nThere are multiple ways\
    \ to return a response from a handler function:\n\n- Classical response object\
    \ with `HTTP` informations:\n\n```python\ndef my_handler(event, context):\n  \
    \  return {\n        \"body\": {\n            \"test\": \"test\"\n        },\n\
    \        \"statusCode\": 200,\n        \"headers\": {\n            \"your-header\"\
    : \"your-value\"\n        }\n    }\n```\n\n- Straight response without `body`:\n\
    \n```python\ndef my_handler(event, context):\n    return {\"message\": \"whatever\"\
    }\n    # or\n    return \"my Message\"\n```\n\n- Stringified response **body**\
    \ (`AWS Lambda`):\n\n```python\nimport json\n\ndef my_handler(event, context):\n\
    \  return {\n    \"body\": json.dumps({\"message\": \"Hello\"}),\n    \"statusCode\"\
    : 200,\n  }\n```\n\n### Python handler name\n\nThe Handler name is basically a\
    \ path to the handler file, suffixed with the function name to use as a handler.\n\
    \nFor example, let's say you have two handlers `hello.py` and `world.py` inside\
    \ `src/handlers` folder:\n\n```\n src\n-- handlers\n---- hello.py => def say_hello\n\
    ---- world.py => def to_the_world\n```\n\nThen, you need to provide a custom handler\
    \ name for each of these handlers, so each of your functions will know which handler\
    \ file to run: `hello` -> `src/handlers/hello.say_hello` and `world` -> `src/handlers/world.to_the_world`.\n\
    \n**By default**, the handler path is `handler.handle` (def `handle` in handler.py).\n\
    \n### Python additional dependencies\n\nAdditional dependencies must be included\
    \ inside a `package` directory at the root of your archive/project:\n\n```bash\n\
    # At the root of your archive\nmkdir package\n```\n\n```\n- requirements.txt\n\
    - handlers\n--- handler.py => import requests\n--- secondHandler.py => import\
    \ requests\n- package\n--- requests\n--- ...\n```\n\n#### Standard dependencies\n\
    \nYou may install your dependencies to the `package` directory:\n\n```bash\npip\
    \ install requests --target ./package\n```\n\nOr with a `requirements.txt` file:\n\
    \n```bash\npip install -r requirements.txt --target ./package\n```\n\n#### Specific\
    \ libraries (with needs for specific C compiled code)\n\nIn some cases, you might\
    \ need to install libraries which require specific C compiled code such as (for\
    \ example):\n\n- `numpy`\n- `tensorflow`\n- `pandas`\n- `scikit-learn`\n- ...\n\
    \nOur Python runtimes run on top of `alpine linux` environments, for these specifics\
    \ dependencies, you will have to install your dependencies inside a `docker container`,\
    \ with a specific image, that we are providing to our users.\n\nYou may run the\
    \ following command from the root of your project to install your dependencies\
    \ before uploading your source code and deploying your function:\n\n```bash\n\
    docker run --rm -v $(pwd):/home/app/function --workdir /home/app/function rg.fr-par.scw.cloud/scwfunctionsruntimes/python-dep3:v4.0.0\
    \ pip install -r requirements.txt --target ./package\n```\n\nThis command will\
    \ run `pip install` with given `requirements.txt` file inside a `docker container`\
    \ compatible with our function runtimes, and pull the installed dependencies locally\
    \ to your `package` directory.\nAs these dependencies have been installed on top\
    \ of `alpine linux` with our compatible `system libraries`, you will be able to\
    \ upload your source code and deploy your function properly.\n\n**Note** that\
    \ the example below uses `python3` runtime, but you can easily change the docker\
    \ image from `rg.fr-par.scw.cloud/scwfunctionsruntimes/python-dep3:v4.0.0` to\
    \ `rg.fr-par.scw.cloud/scwfunctionsruntimes/python-dep2:v4.0.0`\n\n## Remove a\
    \ Scaleway Functions namespace (Project)\n\nWhen deleting a Functions Namespace,\
    \ we take care of removing all sub-resources such as `Functions` and `CRONs` deployed\
    \ in this namespace.\n\n- With `Serverless Framework`:\n\n```bash\nserverless\
    \ remove\n```\n\n- With `curl`:\n\n```bash\ncurl -X DELETE -H \"X-Auth-Token:\
    \ ${TOKEN}\" \"https://api.scaleway.com/functions/v1alpha2/regions/$REGION/namespaces/$NAMESPACE_ID\"\
    \n```\n\n**Please note** that deleting a `Scaleway Functions` namespace will not\
    \ automatically delete Scaleway Container Registry namespaces linked to your FAAS\
    \ project. It is your responsibility to manually remove your Registry namespaces\
    \ via Scaleway Console or API.\n\n## Develop Locally\n\nIf you are using either\
    \ `node` or `python` runtimes, you may use our [Offline Gateway plugin](https://github.com/scaleway/serverless-offline-scaleway)\
    \ (Developed and maintained by Scaleway).\n\n```bash\nnpm install --save-dev serverless-offline-scaleway\n\
    ```\n\nAnd in your serverless File:\n\n```yml\nplugins:\n  - serverless-scaleway-functions\n\
    \  - serverless-offline-scaleway\n```\n\nYou may now invoke your functions locally\
    \ via the following command line:\n\n```bash\nserverless offline start\n```\n\n\
    ## API Reference\n\n### Event\n\n#### Node/Python\n\n- `pathParameters`: map(string)string\
    \ - Parameters defined in the path of the HTTP Request\n- `queryStringParameters`:\
    \ map(string)string - Query Strings parameters of the HTTP Request\n- `body`:\
    \ string|byte() - Body of the HTTP Request, you will have to parse it in your\
    \ handler to use it properly.\n- `headers`: map(string)string - HTTP Request Headers\n\
    - `method`: string - HTTP method used\n- `isBase64Encoded`: boolean - Whether\
    \ the request body is base64 encoded.\n\n#### Golang\n\nYou may take a look at\
    \ [our scaleway-functions-go package](https://github.com/scaleway/scaleway-functions-go)\
    \ (events and lambda) packages.\n\n### Context\n\nContext typings will be supported\
    \ soon, you may already use it in functions, but every value be `defaults values`\
    \ as our API does not support it right now.\n"
  title: Functions API
  version: v1alpha2
servers:
- url: https://api.scaleway.com
tags:
- name: Namespaces
- name: Functions
- name: Containers
- name: Crons
- name: Logs
paths:
  /functions/v1alpha2/regions/{region}/containers:
    get:
      operationId: ListContainers
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          description: Page number
          type: number
        style: form
      - description: Page size
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          description: Page size
          type: number
        style: form
      - explode: true
        in: query
        name: order_by
        required: false
        schema:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListContainersRequest.OrderBy'
        style: form
      - explode: true
        in: query
        name: namespace_id
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: name
        required: false
        schema:
          $ref: '#/components/schemas/google.protobuf.StringValue'
        style: form
      - explode: true
        in: query
        name: organization_id
        required: false
        schema:
          $ref: '#/components/schemas/google.protobuf.StringValue'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListContainersResponse'
      security:
      - scaleway: []
      summary: List all your containers
      tags:
      - Containers
    post:
      operationId: CreateContainer
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                namespace_id:
                  type: string
                name:
                  type: string
                environment_variables:
                  $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
                min_scale:
                  nullable: true
                  type: number
                max_scale:
                  nullable: true
                  type: number
                memory_limit:
                  nullable: true
                  type: number
                timeout:
                  description: (in milliseconds)
                  type: number
                privacy:
                  $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container.Privacy'
                description:
                  nullable: true
                  type: string
                registry_image:
                  nullable: true
                  type: string
              type: object
              x-properties-order:
              - namespace_id
              - name
              - environment_variables
              - min_scale
              - max_scale
              - memory_limit
              - timeout
              - privacy
              - description
              - registry_image
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container'
      security:
      - scaleway: []
      summary: Create a new container
      tags:
      - Containers
  /functions/v1alpha2/regions/{region}/containers/{container_id}:
    delete:
      description: Delete the container associated with the given id.
      operationId: DeleteContainer
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: container_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container'
      security:
      - scaleway: []
      summary: Delete a container
      tags:
      - Containers
    get:
      description: Get the container associated with the given id.
      operationId: GetContainer
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: container_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container'
      security:
      - scaleway: []
      summary: Get a container
      tags:
      - Containers
    patch:
      description: Update the container associated with the given id.
      operationId: UpdateContainer
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: container_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          application/json:
            schema:
              properties:
                environment_variables:
                  $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
                min_scale:
                  nullable: true
                  type: number
                max_scale:
                  nullable: true
                  type: number
                memory_limit:
                  nullable: true
                  type: number
                timeout:
                  description: (in milliseconds)
                  type: number
                redeploy:
                  nullable: true
                  type: boolean
                privacy:
                  $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container.Privacy'
                description:
                  nullable: true
                  type: string
                registry_image:
                  nullable: true
                  type: string
              type: object
              x-properties-order:
              - environment_variables
              - min_scale
              - max_scale
              - memory_limit
              - timeout
              - redeploy
              - privacy
              - description
              - registry_image
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container'
      security:
      - scaleway: []
      summary: Update an existing container
      tags:
      - Containers
  /functions/v1alpha2/regions/{region}/containers/{container_id}/deploy:
    post:
      operationId: DeployContainer
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: container_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container'
      security:
      - scaleway: []
  /functions/v1alpha2/regions/{region}/crons:
    get:
      operationId: ListCrons
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          description: Page number
          type: number
        style: form
      - description: Page size
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          description: Page size
          type: number
        style: form
      - explode: true
        in: query
        name: order_by
        required: false
        schema:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListCronsRequest.OrderBy'
        style: form
      - explode: true
        in: query
        name: application_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListCronsResponse'
      security:
      - scaleway: []
      summary: List all your crons
      tags:
      - Crons
    post:
      operationId: CreateCron
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_2'
        content:
          application/json:
            schema:
              properties:
                application_id:
                  type: string
                schedule:
                  type: string
                args:
                  $ref: '#/components/schemas/google.protobuf.Struct'
              type: object
              x-properties-order:
              - application_id
              - schedule
              - args
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Cron'
      security:
      - scaleway: []
      summary: Create a new cron
      tags:
      - Crons
  /functions/v1alpha2/regions/{region}/crons/{cron_id}:
    delete:
      description: Delete the cron associated with the given id.
      operationId: DeleteCron
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: cron_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Cron'
      security:
      - scaleway: []
      summary: Delete an existing cron
      tags:
      - Crons
    get:
      description: Get the cron associated with the given id.
      operationId: GetCron
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: cron_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Cron'
      security:
      - scaleway: []
      summary: Get a cron
      tags:
      - Crons
    patch:
      description: Update the cron associated with the given id.
      operationId: UpdateCron
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: cron_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_3'
        content:
          application/json:
            schema:
              properties:
                application_id:
                  nullable: true
                  type: string
                schedule:
                  nullable: true
                  type: string
                args:
                  $ref: '#/components/schemas/google.protobuf.Struct'
              type: object
              x-properties-order:
              - application_id
              - schedule
              - args
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Cron'
      security:
      - scaleway: []
      summary: Update an existing cron
      tags:
      - Crons
  /functions/v1alpha2/regions/{region}/functions:
    get:
      operationId: ListFunctions
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          description: Page number
          type: number
        style: form
      - description: Page size
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          description: Page size
          type: number
        style: form
      - explode: true
        in: query
        name: order_by
        required: false
        schema:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListFunctionsRequest.OrderBy'
        style: form
      - explode: true
        in: query
        name: namespace_id
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: name
        required: false
        schema:
          $ref: '#/components/schemas/google.protobuf.StringValue'
        style: form
      - explode: true
        in: query
        name: organization_id
        required: false
        schema:
          $ref: '#/components/schemas/google.protobuf.StringValue'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListFunctionsResponse'
      security:
      - scaleway: []
      summary: List all your functions
      tags:
      - Functions
    post:
      operationId: CreateFunction
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_4'
        content:
          application/json:
            schema:
              properties:
                namespace_id:
                  type: string
                name:
                  type: string
                environment_variables:
                  $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
                min_scale:
                  nullable: true
                  type: number
                max_scale:
                  nullable: true
                  type: number
                runtime:
                  $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function.Runtime'
                memory_limit:
                  nullable: true
                  type: number
                timeout:
                  description: (in milliseconds)
                  type: number
                handler:
                  nullable: true
                  type: string
                privacy:
                  $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function.Privacy'
                description:
                  nullable: true
                  type: string
              type: object
              x-properties-order:
              - namespace_id
              - name
              - environment_variables
              - min_scale
              - max_scale
              - runtime
              - memory_limit
              - timeout
              - handler
              - privacy
              - description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function'
      security:
      - scaleway: []
      summary: Create a new function
      tags:
      - Functions
  /functions/v1alpha2/regions/{region}/functions/{function_id}:
    delete:
      description: Delete the function associated with the given id.
      operationId: DeleteFunction
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: function_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function'
      security:
      - scaleway: []
      summary: Delete a function
      tags:
      - Functions
    get:
      description: Get the function associated with the given id.
      operationId: GetFunction
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: function_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function'
      security:
      - scaleway: []
      summary: Get a function
      tags:
      - Functions
    patch:
      description: Update the function associated with the given id.
      operationId: UpdateFunction
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: function_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_5'
        content:
          application/json:
            schema:
              properties:
                environment_variables:
                  $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
                min_scale:
                  nullable: true
                  type: number
                max_scale:
                  nullable: true
                  type: number
                memory_limit:
                  nullable: true
                  type: number
                timeout:
                  description: (in milliseconds)
                  type: number
                redeploy:
                  nullable: true
                  type: boolean
                handler:
                  nullable: true
                  type: string
                privacy:
                  $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function.Privacy'
                description:
                  nullable: true
                  type: string
              type: object
              x-properties-order:
              - environment_variables
              - min_scale
              - max_scale
              - memory_limit
              - timeout
              - redeploy
              - handler
              - privacy
              - description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function'
      security:
      - scaleway: []
      summary: Update an existing function
      tags:
      - Functions
  /functions/v1alpha2/regions/{region}/functions/{function_id}/deploy:
    post:
      operationId: DeployFunction
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: function_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function'
      security:
      - scaleway: []
  /functions/v1alpha2/regions/{region}/functions/{function_id}/download-url:
    get:
      operationId: GetFunctionDownloadURL
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: function_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.DownloadURL'
      security:
      - scaleway: []
  /functions/v1alpha2/regions/{region}/functions/{function_id}/upload-url:
    get:
      operationId: GetFunctionUploadURL
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: function_id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: content_length
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.UploadURL'
      security:
      - scaleway: []
  /functions/v1alpha2/regions/{region}/jwt/issue:
    get:
      operationId: IssueJWT
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: true
        in: query
        name: function_id
        required: false
        schema:
          type: string
          x-one-of: scope
        style: form
      - explode: true
        in: query
        name: container_id
        required: false
        schema:
          type: string
          x-one-of: scope
        style: form
      - explode: true
        in: query
        name: namespace_id
        required: false
        schema:
          type: string
          x-one-of: scope
        style: form
      - explode: true
        in: query
        name: expiration_date
        required: false
        schema:
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Token'
      security:
      - scaleway: []
  /functions/v1alpha2/regions/{region}/logs:
    get:
      operationId: ListLogs
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: true
        in: query
        name: application_id
        required: false
        schema:
          type: string
          x-one-of: scope
        style: form
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          description: Page number
          type: number
        style: form
      - description: Page size
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          description: Page size
          type: number
        style: form
      - explode: true
        in: query
        name: order_by
        required: false
        schema:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListLogsRequest.OrderBy'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListLogsResponse'
      security:
      - scaleway: []
      summary: List your application logs
      tags:
      - Logs
  /functions/v1alpha2/regions/{region}/namespaces:
    get:
      operationId: ListNamespaces
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          description: Page number
          type: number
        style: form
      - description: Page size
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          description: Page size
          type: number
        style: form
      - explode: true
        in: query
        name: order_by
        required: false
        schema:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListNamespacesRequest.OrderBy'
        style: form
      - explode: true
        in: query
        name: name
        required: false
        schema:
          $ref: '#/components/schemas/google.protobuf.StringValue'
        style: form
      - explode: true
        in: query
        name: organization_id
        required: false
        schema:
          $ref: '#/components/schemas/google.protobuf.StringValue'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListNamespacesResponse'
      security:
      - scaleway: []
      summary: List all your namespaces
      tags:
      - Namespaces
    post:
      operationId: CreateNamespace
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_6'
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                environment_variables:
                  $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
                organization_id:
                  type: string
                description:
                  nullable: true
                  type: string
              type: object
              x-properties-order:
              - name
              - environment_variables
              - organization_id
              - description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Namespace'
      security:
      - scaleway: []
      summary: Create a new namespace
      tags:
      - Namespaces
  /functions/v1alpha2/regions/{region}/namespaces/{namespace_id}:
    delete:
      description: Delete the namespace associated with the given id.
      operationId: DeleteNamespace
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Namespace'
      security:
      - scaleway: []
      summary: Delete an existing namespace
      tags:
      - Namespaces
    get:
      description: Get the namespace associated with the given id.
      operationId: GetNamespace
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Namespace'
      security:
      - scaleway: []
      summary: Get a namespace
      tags:
      - Namespaces
    patch:
      description: Update the space associated with the given id.
      operationId: UpdateNamespace
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      - explode: false
        in: path
        name: namespace_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_7'
        content:
          application/json:
            schema:
              properties:
                environment_variables:
                  $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
                description:
                  nullable: true
                  type: string
              type: object
              x-properties-order:
              - environment_variables
              - description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.Namespace'
      security:
      - scaleway: []
      summary: Update an existing namespace
      tags:
      - Namespaces
  /functions/v1alpha2/regions/{region}/runtimes:
    get:
      description: List available function runtimes.
      operationId: ListFunctionRuntimes
      parameters:
      - description: The region you want to target
        explode: false
        in: path
        name: region
        required: true
        schema:
          description: The region you want to target
          enum:
          - fr-par
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scaleway.functions.v1alpha2.ListFunctionRuntimesResponse'
      security:
      - scaleway: []
      summary: List function runtimes
      tags:
      - Functions
components:
  requestBodies:
    inline_object_1:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      required: true
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
    inline_object_7:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_7'
      required: true
    inline_object_6:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_6'
      required: true
    inline_object_5:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_5'
      required: true
    inline_object_4:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_4'
      required: true
    inline_object_3:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_3'
      required: true
    inline_object_2:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object_2'
      required: true
  schemas:
    google.protobuf.BoolValue:
      nullable: true
      type: boolean
    google.protobuf.StringValue:
      nullable: true
      type: string
    google.protobuf.Struct:
      example:
        fields:
          key: '{}'
      properties:
        fields:
          additionalProperties: true
          properties:
            <fieldKey>:
              $ref: '#/components/schemas/google.protobuf.Value'
          type: object
      type: object
      x-properties-order:
      - fields
    google.protobuf.Timestamp:
      format: date-time
      type: string
    google.protobuf.UInt32Value:
      nullable: true
      type: number
    google.protobuf.Value:
      properties:
        null_value:
          default: NULL_VALUE
          enum:
          - NULL_VALUE
          type: string
          x-one-of: kind
        number_value:
          type: number
          x-one-of: kind
        string_value:
          type: string
          x-one-of: kind
        bool_value:
          type: boolean
          x-one-of: kind
        struct_value:
          $ref: '#/components/schemas/google_protobuf_Value_struct_value'
        list_value:
          $ref: '#/components/schemas/google_protobuf_Value_list_value'
      type: object
      x-properties-order:
      - null_value
      - number_value
      - string_value
      - bool_value
      - struct_value
      - list_value
    scaleway.functions.v1alpha2.Container:
      example:
        error_message: error_message
        description: description
        timeout: 5.637376656633329
        max_scale: 6.027456183070403
        environment_variables:
          key: '{}'
        endpoint: endpoint
        registry_image: registry_image
        namespace_id: namespace_id
        min_scale: 0.8008281904610115
        cpu_limit: 5.962133916683182
        name: name
        id: id
        memory_limit: 1.4658129805029452
        region: region
      properties:
        id:
          type: string
        name:
          type: string
        namespace_id:
          type: string
        status:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container.Status'
        environment_variables:
          additionalProperties: true
          properties:
            <environment_variableKey>:
              type: string
          type: object
        min_scale:
          type: number
        max_scale:
          type: number
        memory_limit:
          type: number
        cpu_limit:
          type: number
        endpoint:
          type: string
        timeout:
          description: (in milliseconds)
          type: number
        error_message:
          type: string
        privacy:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container.Privacy'
        description:
          nullable: true
          type: string
        registry_image:
          type: string
        region:
          type: string
      type: object
      x-properties-order:
      - id
      - name
      - namespace_id
      - status
      - environment_variables
      - min_scale
      - max_scale
      - memory_limit
      - cpu_limit
      - endpoint
      - timeout
      - error_message
      - privacy
      - description
      - registry_image
      - region
    scaleway.functions.v1alpha2.Container.Privacy:
      default: unknown
      enum:
      - unknown
      - public
      - private
      type: string
    scaleway.functions.v1alpha2.Container.Status:
      default: ready
      enum:
      - ready
      - deleting
      - error
      - locked
      - creating
      - pending
      - created
      type: string
    scaleway.functions.v1alpha2.Cron:
      example:
        args:
          fields:
            key: '{}'
        schedule: schedule
        id: id
        application_id: application_id
      properties:
        id:
          type: string
        application_id:
          type: string
        schedule:
          type: string
        args:
          $ref: '#/components/schemas/google.protobuf.Struct'
        status:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Cron.Status'
      type: object
      x-properties-order:
      - id
      - application_id
      - schedule
      - args
      - status
    scaleway.functions.v1alpha2.Cron.Status:
      default: ready
      enum:
      - ready
      - deleting
      - error
      - locked
      - creating
      - pending
      type: string
    scaleway.functions.v1alpha2.DownloadURL:
      example:
        headers:
          key: '{}'
        url: url
      properties:
        url:
          type: string
        headers:
          additionalProperties: true
          properties:
            <headerKey>:
              $ref: '#/components/schemas/scaleway.std.StringsValue'
          type: object
      type: object
      x-properties-order:
      - url
      - headers
    scaleway.functions.v1alpha2.Function:
      example:
        error_message: error_message
        handler: handler
        description: description
        timeout: 5.637376656633329
        max_scale: 6.027456183070403
        environment_variables:
          key: '{}'
        endpoint: endpoint
        namespace_id: namespace_id
        min_scale: 0.8008281904610115
        cpu_limit: 5.962133916683182
        name: name
        id: id
        memory_limit: 1.4658129805029452
        region: region
      properties:
        id:
          type: string
        name:
          type: string
        namespace_id:
          type: string
        status:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function.Status'
        environment_variables:
          additionalProperties: true
          properties:
            <environment_variableKey>:
              type: string
          type: object
        min_scale:
          type: number
        max_scale:
          type: number
        runtime:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function.Runtime'
        memory_limit:
          type: number
        cpu_limit:
          type: number
        endpoint:
          type: string
        timeout:
          description: (in milliseconds)
          type: number
        handler:
          type: string
        error_message:
          type: string
        privacy:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function.Privacy'
        description:
          nullable: true
          type: string
        region:
          type: string
      type: object
      x-properties-order:
      - id
      - name
      - namespace_id
      - status
      - environment_variables
      - min_scale
      - max_scale
      - runtime
      - memory_limit
      - cpu_limit
      - endpoint
      - timeout
      - handler
      - error_message
      - privacy
      - description
      - region
    scaleway.functions.v1alpha2.Function.Privacy:
      default: unknown
      enum:
      - unknown
      - public
      - private
      type: string
    scaleway.functions.v1alpha2.Function.Runtime:
      default: golang
      enum:
      - golang
      - python
      - python3
      - node8
      - node10
      type: string
    scaleway.functions.v1alpha2.Function.Status:
      default: ready
      enum:
      - ready
      - deleting
      - error
      - locked
      - creating
      - pending
      - created
      type: string
    scaleway.functions.v1alpha2.ListContainersRequest.OrderBy:
      default: created_at_asc
      enum:
      - created_at_asc
      - created_at_desc
      - name_asc
      - name_desc
      type: string
    scaleway.functions.v1alpha2.ListContainersResponse:
      example:
        total_count: 2.3021358869347655
        containers:
        - error_message: error_message
          description: description
          timeout: 5.637376656633329
          max_scale: 6.027456183070403
          environment_variables:
            key: '{}'
          endpoint: endpoint
          registry_image: registry_image
          namespace_id: namespace_id
          min_scale: 0.8008281904610115
          cpu_limit: 5.962133916683182
          name: name
          id: id
          memory_limit: 1.4658129805029452
          region: region
        - error_message: error_message
          description: description
          timeout: 5.637376656633329
          max_scale: 6.027456183070403
          environment_variables:
            key: '{}'
          endpoint: endpoint
          registry_image: registry_image
          namespace_id: namespace_id
          min_scale: 0.8008281904610115
          cpu_limit: 5.962133916683182
          name: name
          id: id
          memory_limit: 1.4658129805029452
          region: region
      properties:
        containers:
          items:
            $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container'
          type: array
        total_count:
          type: number
      type: object
      x-properties-order:
      - containers
      - total_count
    scaleway.functions.v1alpha2.ListCronsRequest.OrderBy:
      default: created_at_asc
      enum:
      - created_at_asc
      - created_at_desc
      type: string
    scaleway.functions.v1alpha2.ListCronsResponse:
      example:
        total_count: 0.8008281904610115
        crons:
        - args:
            fields:
              key: '{}'
          schedule: schedule
          id: id
          application_id: application_id
        - args:
            fields:
              key: '{}'
          schedule: schedule
          id: id
          application_id: application_id
      properties:
        crons:
          items:
            $ref: '#/components/schemas/scaleway.functions.v1alpha2.Cron'
          type: array
        total_count:
          type: number
      type: object
      x-properties-order:
      - crons
      - total_count
    scaleway.functions.v1alpha2.ListFunctionRuntimesResponse:
      example:
        runtimes:
        - null
        - null
      properties:
        runtimes:
          items:
            $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function.Runtime'
          type: array
      type: object
      x-properties-order:
      - runtimes
    scaleway.functions.v1alpha2.ListFunctionsRequest.OrderBy:
      default: created_at_asc
      enum:
      - created_at_asc
      - created_at_desc
      - name_asc
      - name_desc
      type: string
    scaleway.functions.v1alpha2.ListFunctionsResponse:
      example:
        functions:
        - error_message: error_message
          handler: handler
          description: description
          timeout: 5.637376656633329
          max_scale: 6.027456183070403
          environment_variables:
            key: '{}'
          endpoint: endpoint
          namespace_id: namespace_id
          min_scale: 0.8008281904610115
          cpu_limit: 5.962133916683182
          name: name
          id: id
          memory_limit: 1.4658129805029452
          region: region
        - error_message: error_message
          handler: handler
          description: description
          timeout: 5.637376656633329
          max_scale: 6.027456183070403
          environment_variables:
            key: '{}'
          endpoint: endpoint
          namespace_id: namespace_id
          min_scale: 0.8008281904610115
          cpu_limit: 5.962133916683182
          name: name
          id: id
          memory_limit: 1.4658129805029452
          region: region
        total_count: 2.3021358869347655
      properties:
        functions:
          items:
            $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function'
          type: array
        total_count:
          type: number
      type: object
      x-properties-order:
      - functions
      - total_count
    scaleway.functions.v1alpha2.ListLogsRequest.OrderBy:
      default: timestamp_desc
      enum:
      - timestamp_desc
      - timestamp_asc
      type: string
    scaleway.functions.v1alpha2.ListLogsResponse:
      example:
        total_count: 0.8008281904610115
        logs:
        - id: id
          message: message
          timestamp: 2000-01-23T04:56:07.000+00:00
        - id: id
          message: message
          timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        logs:
          items:
            $ref: '#/components/schemas/scaleway.functions.v1alpha2.Log'
          type: array
        total_count:
          type: number
      type: object
      x-properties-order:
      - logs
      - total_count
    scaleway.functions.v1alpha2.ListNamespacesRequest.OrderBy:
      default: created_at_asc
      enum:
      - created_at_asc
      - created_at_desc
      - name_asc
      - name_desc
      type: string
    scaleway.functions.v1alpha2.ListNamespacesResponse:
      example:
        total_count: 0.8008281904610115
        namespaces:
        - error_message: error_message
          environment_variables:
            key: '{}'
          registry_endpoint: registry_endpoint
          registry_namespace_id: registry_namespace_id
          organization_id: organization_id
          name: name
          description: description
          id: id
          region: region
        - error_message: error_message
          environment_variables:
            key: '{}'
          registry_endpoint: registry_endpoint
          registry_namespace_id: registry_namespace_id
          organization_id: organization_id
          name: name
          description: description
          id: id
          region: region
      properties:
        namespaces:
          items:
            $ref: '#/components/schemas/scaleway.functions.v1alpha2.Namespace'
          type: array
        total_count:
          type: number
      type: object
      x-properties-order:
      - namespaces
      - total_count
    scaleway.functions.v1alpha2.Log:
      example:
        id: id
        message: message
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        message:
          type: string
        timestamp:
          format: date-time
          type: string
        id:
          type: string
      type: object
      x-properties-order:
      - message
      - timestamp
      - id
    scaleway.functions.v1alpha2.Namespace:
      example:
        error_message: error_message
        environment_variables:
          key: '{}'
        registry_endpoint: registry_endpoint
        registry_namespace_id: registry_namespace_id
        organization_id: organization_id
        name: name
        description: description
        id: id
        region: region
      properties:
        id:
          type: string
        name:
          type: string
        environment_variables:
          additionalProperties: true
          properties:
            <environment_variableKey>:
              type: string
          type: object
        organization_id:
          type: string
        status:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Namespace.Status'
        registry_namespace_id:
          type: string
        error_message:
          type: string
        registry_endpoint:
          type: string
        description:
          nullable: true
          type: string
        region:
          type: string
      type: object
      x-properties-order:
      - id
      - name
      - environment_variables
      - organization_id
      - status
      - registry_namespace_id
      - error_message
      - registry_endpoint
      - description
      - region
    scaleway.functions.v1alpha2.Namespace.Status:
      default: ready
      enum:
      - ready
      - deleting
      - error
      - locked
      - creating
      - pending
      type: string
    scaleway.functions.v1alpha2.Token:
      example:
        public_key: public_key
        token: token
      properties:
        token:
          type: string
        public_key:
          type: string
      type: object
      x-properties-order:
      - token
      - public_key
    scaleway.functions.v1alpha2.UploadURL:
      example:
        headers:
          key: '{}'
        url: url
      properties:
        url:
          type: string
        headers:
          additionalProperties: true
          properties:
            <headerKey>:
              $ref: '#/components/schemas/scaleway.std.StringsValue'
          type: object
      type: object
      x-properties-order:
      - url
      - headers
    scaleway.std.MapStringStringValue:
      nullable: true
      properties:
        <key>:
          type: string
      type: object
    scaleway.std.StringsValue:
      items:
        type: string
      nullable: true
      type: array
    inline_object:
      properties:
        namespace_id:
          type: string
        name:
          type: string
        environment_variables:
          $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
        min_scale:
          nullable: true
          type: number
        max_scale:
          nullable: true
          type: number
        memory_limit:
          nullable: true
          type: number
        timeout:
          description: (in milliseconds)
          type: number
        privacy:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container.Privacy'
        description:
          nullable: true
          type: string
        registry_image:
          nullable: true
          type: string
      type: object
      x-properties-order:
      - namespace_id
      - name
      - environment_variables
      - min_scale
      - max_scale
      - memory_limit
      - timeout
      - privacy
      - description
      - registry_image
    inline_object_1:
      properties:
        environment_variables:
          $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
        min_scale:
          nullable: true
          type: number
        max_scale:
          nullable: true
          type: number
        memory_limit:
          nullable: true
          type: number
        timeout:
          description: (in milliseconds)
          type: number
        redeploy:
          nullable: true
          type: boolean
        privacy:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Container.Privacy'
        description:
          nullable: true
          type: string
        registry_image:
          nullable: true
          type: string
      type: object
      x-properties-order:
      - environment_variables
      - min_scale
      - max_scale
      - memory_limit
      - timeout
      - redeploy
      - privacy
      - description
      - registry_image
    inline_object_2:
      properties:
        application_id:
          type: string
        schedule:
          type: string
        args:
          $ref: '#/components/schemas/google.protobuf.Struct'
      type: object
      x-properties-order:
      - application_id
      - schedule
      - args
    inline_object_3:
      properties:
        application_id:
          nullable: true
          type: string
        schedule:
          nullable: true
          type: string
        args:
          $ref: '#/components/schemas/google.protobuf.Struct'
      type: object
      x-properties-order:
      - application_id
      - schedule
      - args
    inline_object_4:
      properties:
        namespace_id:
          type: string
        name:
          type: string
        environment_variables:
          $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
        min_scale:
          nullable: true
          type: number
        max_scale:
          nullable: true
          type: number
        runtime:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function.Runtime'
        memory_limit:
          nullable: true
          type: number
        timeout:
          description: (in milliseconds)
          type: number
        handler:
          nullable: true
          type: string
        privacy:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function.Privacy'
        description:
          nullable: true
          type: string
      type: object
      x-properties-order:
      - namespace_id
      - name
      - environment_variables
      - min_scale
      - max_scale
      - runtime
      - memory_limit
      - timeout
      - handler
      - privacy
      - description
    inline_object_5:
      properties:
        environment_variables:
          $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
        min_scale:
          nullable: true
          type: number
        max_scale:
          nullable: true
          type: number
        memory_limit:
          nullable: true
          type: number
        timeout:
          description: (in milliseconds)
          type: number
        redeploy:
          nullable: true
          type: boolean
        handler:
          nullable: true
          type: string
        privacy:
          $ref: '#/components/schemas/scaleway.functions.v1alpha2.Function.Privacy'
        description:
          nullable: true
          type: string
      type: object
      x-properties-order:
      - environment_variables
      - min_scale
      - max_scale
      - memory_limit
      - timeout
      - redeploy
      - handler
      - privacy
      - description
    inline_object_6:
      properties:
        name:
          type: string
        environment_variables:
          $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
        organization_id:
          type: string
        description:
          nullable: true
          type: string
      type: object
      x-properties-order:
      - name
      - environment_variables
      - organization_id
      - description
    inline_object_7:
      properties:
        environment_variables:
          $ref: '#/components/schemas/scaleway.std.MapStringStringValue'
        description:
          nullable: true
          type: string
      type: object
      x-properties-order:
      - environment_variables
      - description
    google_protobuf_Value_struct_value:
      properties:
        fields:
          additionalProperties: true
          properties:
            <fieldKey>:
              $ref: '#/components/schemas/google.protobuf.Value'
          type: object
    google_protobuf_Value_list_value:
      properties:
        values:
          items:
            $ref: '#/components/schemas/google.protobuf.Value'
          type: array
  securitySchemes:
    scaleway:
      in: header
      name: X-Auth-Token
      type: apiKey
